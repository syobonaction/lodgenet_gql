package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"netreality.world/m/graph/datasources"
	"netreality.world/m/graph/model"
)

// Locale is the resolver for the locale field.
func (r *queryResolver) Locale(ctx context.Context, zip string) (*model.Location, error) {
	d := &datasources.WeatherData{}
	err := datasources.GetWeather(d, zip)

	if err != nil {
		return nil, err
	} else {
		var isDay bool
		if d.Current.Is_day == "yes" {
			isDay = true
		} else {
			isDay = false
		}

		c := &model.Current{
			Temperature:   d.Current.Temperature,
			Feelslike:     d.Current.Feelslike,
			WindSpeed:     d.Current.Wind_speed,
			WindDirection: d.Current.Wind_dir,
			IsDay:         isDay,
		}

		m := &model.Location{
			Name:    d.Location.Name,
			Region:  d.Location.Region,
			Current: c,
		}

		return m, nil
	}
}

// NearbyLocations is the resolver for the nearbyLocations field.
func (r *queryResolver) NearbyLocations(ctx context.Context) ([]*model.Location, error) {
	panic(fmt.Errorf("not implemented: NearbyLocations - nearbyLocations"))
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
